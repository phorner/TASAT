<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEBAAAAEACABoBQAAFgAAACgAAAAQAAAAIAAAAAEACAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAA
        AAATdLYAITyNAB0U0gAJA7sAHBPYAHSgwgA9e8EAZNr6AGnb/QALAH0AMpHNACyV2QBAjbgABAqJADO2
        /AAACJ4ATKjkAAkIjAAqPVIAIlWiACIQrAAADD8AAAKwAHbq6wBYga8AOJ7QAC6d6ABbg6wAUOD7AExf
        rQAoaJMAO36nAEiTygAVLVkAHSeyAFiOsgC04fMAHgrrAC5slgACAdoADBFOAFLB5wAAAjQAIBH3AAQF
        KwAvmcsAE469AFq/8wB7n9sATIykACqb2gApmOMABBV+AEGPvwBb0uQAMIacAB1eowAfI54AE0aJAAQA
        tAAfErwAAQC9AAMCWABTudAAY8P/AHTN1QAAAdIAGhLgAFWXswAwYKAAcLO1AEKIogBo1PwAHUqVAHid
        zQABAoUAAAGUAGDG0wAFBecAMlloADcB4wABAKMAe7++ACVjjwCaxN4AMKPhABlGigAaRooAAQHKACGS
        ygAOEjgAY879AAAFzQAxYJgAQJzeABk0VQBIxu8ABwhiAFeH1QAKCl8AXZuuABkBwQAhX40AGoLRAGPK
        4AAFG+IACxl6AGbC9QAAA10AAAJjAFp/vgAirfcAH4nUAECS3AAVSo4AChE/AAEBywA9zfMAM4G8AAyi
        6QACANoAKTKXAAQNaQA8qeIAOIbCAAEQEAAYqtQAH5vdADtepQBavvMANYzUAECu6AAAAqIAOZDOADkP
        0AA7kcgAR6/iAA4E5gA8eJAAAQCuAAmX2wAAAboAT7DlAFB7dQATC+kAPJHjAAEBzAAzgb0AgsfGAA4A
        wAADANsAJpfSAKTR4wAEA+QAMIzVAAACkQABApEAAgCUACoX1wAAltkAM4neAAExYQA/fYUACAE+AAYG
        nQBNka4AKVebABgI2AA9e5oAAAusAAABuwBmnM4ADCZtAAAAwQA5mN4AgLLZAD1ThgCOle4ASXqXAAoP
        pgBhg7oAOaHnACSU0wAjl9MAHE6TAC+OygBTvvUADQtlAAIC6wBJoOQAkrvZAFrC7wALAYYAd9T3AApc
        ZAAAAKcAIFuWAAsR2QB/rcsAZqO3AAICSwAABUsATY6vAAECVAA5fJ4AW6jPAGimtwAYQYgASrXtAAAA
        aQAstNkAGR7KAF+IrwAAAoEAJpvFAEl2sACMutcARYWnAAASGQAydJkAdbTGADWL1ABMo9wAAgE3AHPe
        +wAqDfoAAAVMADLR6ACs2esAO5LXAEri/wAMIXIAKJn+ABEnYAAKotsANFiOAEKBnABZlq0AIZDbAAIF
        ggBpkqoAQaDvAFeivwBK2OsAOLbpAD1WUwBpk7YAZ+X/ABUAcwA2jtUANyewAHDe/AAcOnUAgc/zAAIC
        TQAAAAAA8kqvvlTkJJjYxgX21Bu0GBkBbmTORlKU3MftMeyoHev5VzK1b49AWsvzwvR/n2dmgla2jCyr
        IQ/TUDD96q5wU906l+miIuL4o7PFsqF3Cx6az0WskO+VDUvAPjnI0lUmcXJZ+smpjYRMeglO8OOD294T
        uwQUkq0Ww5vVY2l9L8yOSeeGZSd0qotRnd+kEkhHa7i9NBWWeFg9O5wCX+b7pcE4c7G8iZlcQgNtbHkp
        W0TgpmCw9StqpzzaJU+ADrrKgV0caCgjEeFDnmFifujQ2XvE9wd1KpH+0aAG7jMa8Tct/D9BTc0gDB/X
        AHaTfDWKLuWINhcIvxBet4W5CgrWhwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>